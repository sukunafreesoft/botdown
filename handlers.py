from aiogram import types
from aiogram.dispatcher.filters import Text
from bot import dp, bot
import database
import config

async def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    for channel in config.CHANNELS:
        try:
            chat_member = await bot.get_chat_member(channel, user_id)
            if chat_member.status not in ["member", "administrator", "creator"]:
                return False  # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        except:
            return False  # –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    return True  # –ü–æ–¥–ø–∏—Å–∞–Ω

@dp.message_handler(Text(equals="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))
async def show_categories(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = database.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for category in categories:
        keyboard.add(types.InlineKeyboardButton(category[1], callback_data=f"category_{category[0]}"))

    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("category_"))
async def show_apps(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback_query.data.split("_")[1])
    apps = database.get_apps_by_category(category_id)
    
    if not apps:
        await bot.send_message(callback_query.from_user.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
        return

    keyboard = types.InlineKeyboardMarkup()
    for app in apps:
        keyboard.add(types.InlineKeyboardButton(app[1], callback_data=f"app_{app[0]}"))

    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("app_"))
async def send_app(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    app_id = int(callback_query.data.split("_")[1])
    app = database.get_app_by_id(app_id)

    user_id = callback_query.from_user.id
    if not await check_subscription(user_id):
        keyboard = types.InlineKeyboardMarkup()
        for channel in config.CHANNELS:
            keyboard.add(types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel.lstrip('@sukunafreesoft')}"))
        await bot.send_message(user_id, "–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã!", reply_markup=keyboard)
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üìñ –¢—É—Ç–æ—Ä–∏–∞–ª", callback_data=f"tutorial_{app_id}"))

    await bot.send_document(user_id, app[4], caption=app[2], reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("tutorial_"))
async def send_tutorial(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ –≤–∏–¥–µ–æ-—Ç—É—Ç–æ—Ä–∏–∞–ª"""
    app_id = int(callback_query.data.split("_")[1])
    app = database.get_app_by_id(app_id)

    user_id = callback_query.from_user.id

    if app[5]:  # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª
        await bot.send_message(user_id, app[5])

    if app[6]:  # –í–∏–¥–µ–æ-—Ç—É—Ç–æ—Ä–∏–∞–ª
        await bot.send_video(user_id, app[6])

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in config.ADMIN_IDS:
        return  

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))
    keyboard.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"))

    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)